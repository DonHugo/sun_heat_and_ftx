#!/bin/bash
echo "üîç COMPREHENSIVE SYSTEM DIAGNOSIS"
echo "================================="

# Check if we can connect to the Pi
echo "1. Testing SSH connection to Pi..."
if ssh -o ConnectTimeout=10 pi@192.168.0.18 "echo 'Connected'" 2>/dev/null; then
    echo "‚úÖ SSH connection successful"
    
    echo ""
    echo "2. Checking Pi system status..."
    ssh pi@192.168.0.18 << 'PI_EOF'
        echo "üìä System Status:"
        echo "   ‚Ä¢ Uptime: $(uptime)"
        echo "   ‚Ä¢ Memory: $(free -h | grep Mem)"
        echo "   ‚Ä¢ Disk: $(df -h / | tail -1)"
        
        echo ""
        echo "üì° Network Status:"
        echo "   ‚Ä¢ IP: $(hostname -I)"
        echo "   ‚Ä¢ Nginx: $(systemctl is-active nginx)"
        echo "   ‚Ä¢ MQTT: $(systemctl is-active mosquitto)"
        
        echo ""
        echo "üîß API Proxy Status:"
        echo "   ‚Ä¢ Running processes:"
        ps aux | grep -E "(api_proxy|python3.*tmp)" | grep -v grep || echo "   No API proxies running"
        
        echo ""
        echo "üåê Testing API endpoints:"
        echo "   ‚Ä¢ Port 5001:"
        curl -s --connect-timeout 5 http://localhost:5001/api/status 2>/dev/null || echo "   ‚ùå Port 5001 not responding"
        
        echo "   ‚Ä¢ Port 80 (nginx):"
        curl -s --connect-timeout 5 http://localhost/api/status 2>/dev/null || echo "   ‚ùå Nginx not responding"
        
        echo ""
        echo "üìã Nginx Configuration:"
        if [ -f /etc/nginx/sites-enabled/solar_heating.conf ]; then
            echo "   ‚úÖ Solar heating config exists"
            echo "   ‚Ä¢ Config content:"
            cat /etc/nginx/sites-enabled/solar_heating.conf | head -10
        else
            echo "   ‚ùå Solar heating config missing"
        fi
        
        echo ""
        echo "üìÅ Frontend Files:"
        if [ -d /opt/solar_heating/frontend ]; then
            echo "   ‚úÖ Frontend directory exists"
            echo "   ‚Ä¢ Files:"
            ls -la /opt/solar_heating/frontend/ | head -5
        else
            echo "   ‚ùå Frontend directory missing"
        fi
        
        echo ""
        echo "üîç Recent Logs:"
        if [ -f /tmp/simple_api.log ]; then
            echo "   ‚Ä¢ Simple API logs:"
            tail -5 /tmp/simple_api.log
        else
            echo "   ‚ùå No simple API logs found"
        fi
        
        echo ""
        echo "üß™ Testing complete API workflow:"
        echo "   ‚Ä¢ Creating test API proxy..."
        cat > /tmp/test_api.py << 'TEST_EOF'
from flask import Flask, jsonify
app = Flask(__name__)

@app.route('/api/status')
def status():
    return jsonify({'system': 'running', 'mode': 'auto', 'pump': 'off', 'heater': 'off', 'mqtt': 'connected', 'home_assistant': 'connected'})

@app.route('/api/temperatures')
def temps():
    return jsonify({'tank_temp': 55.2, 'collector_temp': 7.5, 'ambient_temp': 10.0, 'heat_exchanger_temp': 10.0})

@app.route('/api/mqtt')
def mqtt():
    return jsonify({'connected': True, 'last_message': 'MQTT broker running'})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001, debug=False)
TEST_EOF
        
        echo "   ‚Ä¢ Starting test API proxy..."
        pkill -f "python3 /tmp/" 2>/dev/null || true
        nohup python3 /tmp/test_api.py > /tmp/test_api.log 2>&1 &
        sleep 3
        
        echo "   ‚Ä¢ Testing test API:"
        curl -s http://localhost:5001/api/status || echo "   ‚ùå Test API failed"
        curl -s http://localhost:5001/api/temperatures || echo "   ‚ùå Test API failed"
        
        echo "   ‚Ä¢ Testing through nginx:"
        curl -s http://localhost/api/status || echo "   ‚ùå Nginx proxy failed"
        curl -s http://localhost/api/temperatures || echo "   ‚ùå Nginx proxy failed"
        
        echo ""
        echo "üéØ DIAGNOSIS COMPLETE"
        echo "   ‚Ä¢ Check all the results above"
        echo "   ‚Ä¢ Look for ‚ùå errors"
        echo "   ‚Ä¢ Verify each component is working"
PI_EOF
    
else
    echo "‚ùå SSH connection failed"
    echo ""
    echo "üîß ALTERNATIVE APPROACH:"
    echo "   ‚Ä¢ You'll need to SSH to the Pi manually"
    echo "   ‚Ä¢ Run the diagnostic commands above"
    echo "   ‚Ä¢ Or copy the fix script to the Pi"
fi

echo ""
echo "üìã NEXT STEPS:"
echo "   1. Review all the diagnostic results above"
echo "   2. Identify which components are failing (‚ùå)"
echo "   3. Fix the failing components one by one"
echo "   4. Test each fix before moving to the next"
echo "   5. Only claim 'fixed' after verifying everything works"
