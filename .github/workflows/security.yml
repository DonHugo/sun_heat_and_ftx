name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan every Monday at 2 AM UTC
    - cron: '0 2 * * 1'

# Define permissions for security (explicit permissions for security compliance)
permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Security Analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f python/v3/requirements.txt ]; then pip install -r python/v3/requirements.txt; fi
        
    - name: Run Safety check
      run: |
        echo "üîç Running Safety check for known vulnerabilities..."
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Run Bandit security linter
      run: |
        echo "üîç Running Bandit security linter..."
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt
        
    - name: Run Semgrep security scan
      run: |
        echo "üîç Running Semgrep security scan..."
        semgrep --config=auto --json --output=semgrep-report.json . || true
        semgrep --config=auto .
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json
        retention-days: 30
        
    - name: Comment PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read security reports
          let safetyResults = '';
          let banditResults = '';
          let semgrepResults = '';
          
          try {
            if (fs.existsSync('safety-report.json')) {
              const safety = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
              safetyResults = `Safety: ${safety.length} vulnerabilities found`;
            }
          } catch (e) {
            safetyResults = 'Safety: No issues found';
          }
          
          try {
            if (fs.existsSync('bandit-report.json')) {
              const bandit = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
              banditResults = `Bandit: ${bandit.results.length} issues found`;
            }
          } catch (e) {
            banditResults = 'Bandit: No issues found';
          }
          
          try {
            if (fs.existsSync('semgrep-report.json')) {
              const semgrep = JSON.parse(fs.readFileSync('semgrep-report.json', 'utf8'));
              semgrepResults = `Semgrep: ${semgrep.results.length} findings`;
            }
          } catch (e) {
            semgrepResults = 'Semgrep: No issues found';
          }
          
          const comment = `## üîí Security Scan Results
          
          ${safetyResults}
          ${banditResults}
          ${semgrepResults}
          
          üìä **Detailed reports** are available in the workflow artifacts.
          
          ‚ö†Ô∏è **For critical security issues**, please review and address before merging.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  dependency-review:
    runs-on: ubuntu-latest
    name: Dependency Review
    if: github.event_name == 'pull_request'
    
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, GPL-2.0, GPL-3.0
        deny-licenses: GPL-1.0, AGPL-3.0
